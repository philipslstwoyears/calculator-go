// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/philipslstwoyears/calculator-go/internal/model/dto"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddExpression mocks base method.
func (m *MockStorage) AddExpression(e dto.Expression) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExpression", e)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddExpression indicates an expected call of AddExpression.
func (mr *MockStorageMockRecorder) AddExpression(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExpression", reflect.TypeOf((*MockStorage)(nil).AddExpression), e)
}

// AddUser mocks base method.
func (m *MockStorage) AddUser(e dto.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", e)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockStorageMockRecorder) AddUser(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockStorage)(nil).AddUser), e)
}

// GetExpression mocks base method.
func (m *MockStorage) GetExpression(id int) (dto.Expression, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpression", id)
	ret0, _ := ret[0].(dto.Expression)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetExpression indicates an expected call of GetExpression.
func (mr *MockStorageMockRecorder) GetExpression(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpression", reflect.TypeOf((*MockStorage)(nil).GetExpression), id)
}

// GetExpressions mocks base method.
func (m *MockStorage) GetExpressions(userID int) ([]dto.Expression, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpressions", userID)
	ret0, _ := ret[0].([]dto.Expression)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpressions indicates an expected call of GetExpressions.
func (mr *MockStorageMockRecorder) GetExpressions(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpressions", reflect.TypeOf((*MockStorage)(nil).GetExpressions), userID)
}

// GetUser mocks base method.
func (m *MockStorage) GetUser(login string) (dto.User, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", login)
	ret0, _ := ret[0].(dto.User)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStorageMockRecorder) GetUser(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStorage)(nil).GetUser), login)
}

// UpdateExpression mocks base method.
func (m *MockStorage) UpdateExpression(e dto.Expression) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExpression", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExpression indicates an expected call of UpdateExpression.
func (mr *MockStorageMockRecorder) UpdateExpression(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExpression", reflect.TypeOf((*MockStorage)(nil).UpdateExpression), e)
}
