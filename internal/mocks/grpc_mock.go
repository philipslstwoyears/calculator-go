// Code generated by MockGen. DO NOT EDIT.
// Source: proto/messages_grpc.pb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/philipslstwoyears/calculator-go/proto"
	grpc "google.golang.org/grpc"
)

// MockCalcServiceClient is a mock of CalcServiceClient interface.
type MockCalcServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCalcServiceClientMockRecorder
}

// MockCalcServiceClientMockRecorder is the mock recorder for MockCalcServiceClient.
type MockCalcServiceClientMockRecorder struct {
	mock *MockCalcServiceClient
}

// NewMockCalcServiceClient creates a new mock instance.
func NewMockCalcServiceClient(ctrl *gomock.Controller) *MockCalcServiceClient {
	mock := &MockCalcServiceClient{ctrl: ctrl}
	mock.recorder = &MockCalcServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalcServiceClient) EXPECT() *MockCalcServiceClientMockRecorder {
	return m.recorder
}

// Calc mocks base method.
func (m *MockCalcServiceClient) Calc(ctx context.Context, in *proto.Request, opts ...grpc.CallOption) (*proto.Id, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Calc", varargs...)
	ret0, _ := ret[0].(*proto.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Calc indicates an expected call of Calc.
func (mr *MockCalcServiceClientMockRecorder) Calc(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calc", reflect.TypeOf((*MockCalcServiceClient)(nil).Calc), varargs...)
}

// GetExpression mocks base method.
func (m *MockCalcServiceClient) GetExpression(ctx context.Context, in *proto.Id, opts ...grpc.CallOption) (*proto.Expression, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExpression", varargs...)
	ret0, _ := ret[0].(*proto.Expression)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpression indicates an expected call of GetExpression.
func (mr *MockCalcServiceClientMockRecorder) GetExpression(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpression", reflect.TypeOf((*MockCalcServiceClient)(nil).GetExpression), varargs...)
}

// GetExpressions mocks base method.
func (m *MockCalcServiceClient) GetExpressions(ctx context.Context, in *proto.Id, opts ...grpc.CallOption) (*proto.Expressions, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExpressions", varargs...)
	ret0, _ := ret[0].(*proto.Expressions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpressions indicates an expected call of GetExpressions.
func (mr *MockCalcServiceClientMockRecorder) GetExpressions(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpressions", reflect.TypeOf((*MockCalcServiceClient)(nil).GetExpressions), varargs...)
}

// Login mocks base method.
func (m *MockCalcServiceClient) Login(ctx context.Context, in *proto.User, opts ...grpc.CallOption) (*proto.Id, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*proto.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockCalcServiceClientMockRecorder) Login(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockCalcServiceClient)(nil).Login), varargs...)
}

// Register mocks base method.
func (m *MockCalcServiceClient) Register(ctx context.Context, in *proto.User, opts ...grpc.CallOption) (*proto.Id, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*proto.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockCalcServiceClientMockRecorder) Register(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockCalcServiceClient)(nil).Register), varargs...)
}

// MockCalcServiceServer is a mock of CalcServiceServer interface.
type MockCalcServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCalcServiceServerMockRecorder
}

// MockCalcServiceServerMockRecorder is the mock recorder for MockCalcServiceServer.
type MockCalcServiceServerMockRecorder struct {
	mock *MockCalcServiceServer
}

// NewMockCalcServiceServer creates a new mock instance.
func NewMockCalcServiceServer(ctrl *gomock.Controller) *MockCalcServiceServer {
	mock := &MockCalcServiceServer{ctrl: ctrl}
	mock.recorder = &MockCalcServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalcServiceServer) EXPECT() *MockCalcServiceServerMockRecorder {
	return m.recorder
}

// Calc mocks base method.
func (m *MockCalcServiceServer) Calc(arg0 context.Context, arg1 *proto.Request) (*proto.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Calc", arg0, arg1)
	ret0, _ := ret[0].(*proto.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Calc indicates an expected call of Calc.
func (mr *MockCalcServiceServerMockRecorder) Calc(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calc", reflect.TypeOf((*MockCalcServiceServer)(nil).Calc), arg0, arg1)
}

// GetExpression mocks base method.
func (m *MockCalcServiceServer) GetExpression(arg0 context.Context, arg1 *proto.Id) (*proto.Expression, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpression", arg0, arg1)
	ret0, _ := ret[0].(*proto.Expression)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpression indicates an expected call of GetExpression.
func (mr *MockCalcServiceServerMockRecorder) GetExpression(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpression", reflect.TypeOf((*MockCalcServiceServer)(nil).GetExpression), arg0, arg1)
}

// GetExpressions mocks base method.
func (m *MockCalcServiceServer) GetExpressions(arg0 context.Context, arg1 *proto.Id) (*proto.Expressions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpressions", arg0, arg1)
	ret0, _ := ret[0].(*proto.Expressions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpressions indicates an expected call of GetExpressions.
func (mr *MockCalcServiceServerMockRecorder) GetExpressions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpressions", reflect.TypeOf((*MockCalcServiceServer)(nil).GetExpressions), arg0, arg1)
}

// Login mocks base method.
func (m *MockCalcServiceServer) Login(arg0 context.Context, arg1 *proto.User) (*proto.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*proto.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockCalcServiceServerMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockCalcServiceServer)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockCalcServiceServer) Register(arg0 context.Context, arg1 *proto.User) (*proto.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*proto.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockCalcServiceServerMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockCalcServiceServer)(nil).Register), arg0, arg1)
}

// mustEmbedUnimplementedCalcServiceServer mocks base method.
func (m *MockCalcServiceServer) mustEmbedUnimplementedCalcServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCalcServiceServer")
}

// mustEmbedUnimplementedCalcServiceServer indicates an expected call of mustEmbedUnimplementedCalcServiceServer.
func (mr *MockCalcServiceServerMockRecorder) mustEmbedUnimplementedCalcServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCalcServiceServer", reflect.TypeOf((*MockCalcServiceServer)(nil).mustEmbedUnimplementedCalcServiceServer))
}

// MockUnsafeCalcServiceServer is a mock of UnsafeCalcServiceServer interface.
type MockUnsafeCalcServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCalcServiceServerMockRecorder
}

// MockUnsafeCalcServiceServerMockRecorder is the mock recorder for MockUnsafeCalcServiceServer.
type MockUnsafeCalcServiceServerMockRecorder struct {
	mock *MockUnsafeCalcServiceServer
}

// NewMockUnsafeCalcServiceServer creates a new mock instance.
func NewMockUnsafeCalcServiceServer(ctrl *gomock.Controller) *MockUnsafeCalcServiceServer {
	mock := &MockUnsafeCalcServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCalcServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCalcServiceServer) EXPECT() *MockUnsafeCalcServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCalcServiceServer mocks base method.
func (m *MockUnsafeCalcServiceServer) mustEmbedUnimplementedCalcServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCalcServiceServer")
}

// mustEmbedUnimplementedCalcServiceServer indicates an expected call of mustEmbedUnimplementedCalcServiceServer.
func (mr *MockUnsafeCalcServiceServerMockRecorder) mustEmbedUnimplementedCalcServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCalcServiceServer", reflect.TypeOf((*MockUnsafeCalcServiceServer)(nil).mustEmbedUnimplementedCalcServiceServer))
}
